Changelog
=========

Version 1.5.3
Add a static basic_reading function to sensor.py. This was added by request.
See README for details

Version 1.5.2
Allow use of BCM or BOARD values to identify GPIO pins. hcsr04sensor
uses BCM values by default, but allows the user to override with BOARD
values if they wish.

Version 1.5.1
Added a script called hcsr04.py that allows testing the library.

run 'hcsr04.py --help'  to see options.

Version 1.5.0
Add error handling around failed echo return pulses which could indicate
a sensor or cable problem.  Will allow applications that use the module
to raise an exception and have better error reporting rather than having 
their app hang indefinitely with 100% CPU spike.

Version 1.4.0

Allow changing the default sample_wait from 0.1 seconds to a faster
interval.  This is the speed of the individual samples in sample_size.


Version 1.3.0

Add default values for unit, temperature and round_to in sensor.py
hcsr04sensor uses metric temperature by default.
Most use cases don't need to specify this and just causes extra typing
for nothing.  But option is there to pass the imperial temperature if you like.

Rounding beyond 1 decimal is pointless as readings on a multi tasking OS will
not be Real Time and will have variance within 1 cm.  
But if you need to you can specify round_to to be greater
than 1

See the provided example scripts for usage.

Version 1.2.0
Python 3 compatibility

Version 1.1.4
Allow changing the default sample size from 11 to a user defined value.  Default
remains 11 unless otherwise specified.


Version 1.1.3
Cleanup only GPIO pins being used in sensor.py

Version 1.1.2 
Improved error handling in sensor.py

Version 1.1.1
All functions in sensor.py now methods of Measurement class

Version 1.1.0
Module expanded to allow metric or imperial readings.
See examples/examples.py for usage

Version 1.0.3
Small change to example script depth.py

Version 1.0.2
-Fix bug introduced with version 0.5.11 of RPi.GPIO
